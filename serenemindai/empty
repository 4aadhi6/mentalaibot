import React from "react";
import { Navigate, useLocation } from "react-router-dom";

interface AuthGuardProps {
  children: React.ReactNode;
  adminOnly?: boolean;
}

const AuthGuard: React.FC<AuthGuardProps> = ({
  children,
  adminOnly = false,
}) => {
  const location = useLocation();
  const userString = localStorage.getItem("user");
  const user = userString ? JSON.parse(userString) : null;

  const isAuthenticated = !!user?.token;
  const isAdmin = !!user?.isAdmin;

  if (adminOnly) {
    if (!isAuthenticated || !isAdmin) {
      // Redirect non-admins or non-authenticated users to the main login page
      return <Navigate to="/login" state={{ from: location }} replace />;
    }
    // If admin is authenticated, render the protected content
    return <>{children}</>;
  }

  if (!isAuthenticated) {
    // Redirect non-authenticated users to the login page
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // If user is authenticated, render the protected content
  return <>{children}</>;
};

export default AuthGuard; import React from "react";
import { Outlet } from "react-router-dom";
import AuthGuard from "./AuthGuard";
import MainLayout from "../layout/MainLayout";
import AdminLayout from "../layout/AdminLayout";

// This component is for regular logged-in users
export const ProtectedAppRoutes: React.FC = () => {
  return (
    <AuthGuard>
      <MainLayout>
        <Outlet />
      </MainLayout>
    </AuthGuard>
  );
};

// This component is for admin users
export const ProtectedAdminRoutes: React.FC = () => {
  return (
    <AuthGuard adminOnly={true}>
      <AdminLayout>
        <Outlet />
      </AdminLayout>
    </AuthGuard>
  );
}; import React from "react";
import { Outlet, useNavigate } from "react-router-dom";
import AdminSidebar from "./AdminSidebar";
import Icon, { IconName } from "../ui/Icon";
import ThemeToggle from "../ui/ThemeToggle";

const AdminLayout: React.FC = () => {
  const navigate = useNavigate();

  const handleLogout = () => {
    localStorage.removeItem("user");
    navigate("/login");
  };

  return (
    <div className="flex h-screen bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text font-sans">
      <AdminSidebar />
      <div className="flex-1 flex flex-col overflow-hidden">
        <header className="flex justify-between items-center p-4 shadow-md bg-light-card dark:bg-dark-card">
          <h1 className="text-xl font-bold">Admin Panel</h1>
          <div className="flex items-center gap-4">
            <ThemeToggle />
            <button
              onClick={handleLogout}
              className="flex items-center gap-2 px-3 py-2 text-sm rounded-md text-light-subtle dark:text-dark-subtle hover:bg-red-100 dark:hover:bg-red-900/50 hover:text-red-600 dark:hover:text-red-400 transition-colors"
            >
              <Icon name={IconName.Logout} className="w-5 h-5" />
              <span>Logout</span>
            </button>
          </div>
        </header>
        <main className="flex-1 overflow-x-hidden overflow-y-auto">
          <div className="p-4 sm:p-6 md:p-8">
            <Outlet />
          </div>
        </main>
      </div>
    </div>
  );
};

export default AdminLayout; import React from "react";
import { NavLink } from "react-router-dom";
import Icon, { IconName } from "../ui/Icon";

interface NavItemProps {
  to: string;
  icon: IconName;
  label: string;
}

const NavItem: React.FC<NavItemProps> = ({ to, icon, label }) => {
  const commonClasses =
    "flex items-center px-4 py-3 text-base font-medium rounded-lg transition-colors";
  const activeClasses = "bg-primary text-white";
  const inactiveClasses =
    "text-light-subtle dark:text-dark-subtle hover:bg-gray-200 dark:hover:bg-gray-700";

  return (
    <NavLink
      to={to}
      className={({ isActive }) =>
        `${commonClasses} ${isActive ? activeClasses : inactiveClasses}`
      }
    >
      <Icon name={icon} className="w-6 h-6 mr-4" />
      <span>{label}</span>
    </NavLink>
  );
};

const AdminSidebar: React.FC = () => {
  const user = JSON.parse(localStorage.getItem("user") || "{}");

  return (
    <aside className="w-72 bg-light-card dark:bg-dark-card shadow-lg flex-col z-10 hidden md:flex">
      <div className="flex items-center justify-center p-4 border-b border-gray-200 dark:border-gray-700 h-[69px]">
        <div className="flex items-center space-x-3">
          <Icon name={IconName.Logo} className="w-8 h-8 text-primary" />
          <span className="text-xl font-bold text-light-text dark:text-dark-text">
            SereneMind
          </span>
          <span className="px-2 py-1 text-xs font-semibold text-accent bg-accent/20 rounded-full">
            Admin
          </span>
        </div>
      </div>

      <div className="flex-1 p-4 space-y-2">
        <NavItem
          to="/admin/dashboard"
          icon={IconName.Dashboard}
          label="Dashboard"
        />
        <NavItem
          to="/admin/users"
          icon={IconName.Users}
          label="User Management"
        />
        <NavItem to="/admin/content" icon={IconName.Content} label="Content" />
        <NavItem
          to="/admin/flags"
          icon={IconName.Flag}
          label="Flagged Content"
        />
      </div>

      <div className="p-4 border-t border-gray-200 dark:border-gray-700">
        <div className="flex items-center">
          <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white font-bold text-lg mr-3">
            {user.name ? user.name.charAt(0).toUpperCase() : "A"}
          </div>
          <div>
            <p className="font-semibold text-light-text dark:text-dark-text">
              {user.name || "Admin"}
            </p>
            <p className="text-sm text-light-subtle dark:text-dark-subtle">
              {user.email || ""}
            </p>
          </div>
        </div>
      </div>
    </aside>
  );
};

export default AdminSidebar; import React, { useState } from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from './Sidebar';
import Icon, { IconName } from '../ui/Icon';
import ThemeToggle from '../ui/ThemeToggle';

const MainLayout: React.FC = () => {
    const [isSidebarOpen, setSidebarOpen] = useState(false);

    return (
        <div className="flex h-screen bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text font-sans">
            <Sidebar isOpen={isSidebarOpen} setOpen={setSidebarOpen} />
            <div className="flex-1 flex flex-col overflow-hidden">
                <header className="flex justify-between md:justify-end items-center p-4 shadow-md bg-light-card dark:bg-dark-card md:bg-transparent md:dark:bg-transparent md:shadow-none">
                    <button onClick={() => setSidebarOpen(true)} className="md:hidden text-light-subtle dark:text-dark-subtle">
                        <Icon name={IconName.Menu} className="w-6 h-6" />
                    </button>
                    <ThemeToggle />
                </header>
                <main className="flex-1 overflow-x-hidden overflow-y-auto">
                    <div className="p-4 sm:p-6 md:p-8">
                        <Outlet />
                    </div>
                </main>
            </div>
        </div>
    );
};
 
export default MainLayout; import React from "react";
import { NavLink, useNavigate } from "react-router-dom";
import Icon, { IconName } from "../ui/Icon";

interface SidebarProps {
  isOpen: boolean;
  setOpen: (isOpen: boolean) => void;
}

interface NavItemProps {
  to: string;
  icon: IconName;
  label: string;
  onClick?: () => void;
}

const NavItem: React.FC<NavItemProps> = ({ to, icon, label, onClick }) => {
  const commonClasses =
    "flex items-center px-4 py-3 text-lg font-medium rounded-lg transition-colors";
  const activeClasses = "bg-primary text-white";
  const inactiveClasses =
    "text-light-subtle dark:text-dark-subtle hover:bg-gray-200 dark:hover:bg-gray-700";

  return (
    <NavLink
      to={to}
      onClick={onClick}
      className={({ isActive }) =>
        `${commonClasses} ${isActive ? activeClasses : inactiveClasses}`
      }
    >
      <Icon name={icon} className="w-6 h-6 mr-4" />
      <span>{label}</span>
    </NavLink>
  );
};

const Sidebar: React.FC<SidebarProps> = ({ isOpen, setOpen }) => {
  const navigate = useNavigate();
  const user = JSON.parse(localStorage.getItem("user") || "{}");

  const handleLogout = () => {
    localStorage.removeItem("user");
    navigate("/login");
  };

  const sidebarContent = (
    <>
      <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center space-x-3">
          <Icon name={IconName.Logo} className="w-8 h-8 text-primary" />
          <span className="text-xl font-bold text-light-text dark:text-dark-text">
            SereneMind
          </span>
        </div>
        <button
          onClick={() => setOpen(false)}
          className="md:hidden text-light-subtle dark:text-dark-subtle"
        >
          <Icon name={IconName.Close} className="w-6 h-6" />
        </button>
      </div>

      <div className="flex-1 p-4 space-y-2">
        <NavItem
          to="/app/chat"
          icon={IconName.Chat}
          label="Chat"
          onClick={() => setOpen(false)}
        />
        <NavItem
          to="/app/journal"
          icon={IconName.Journal}
          label="Journal"
          onClick={() => setOpen(false)}
        />
        <NavItem
          to="/app/analytics"
          icon={IconName.Analytics}
          label="Analytics"
          onClick={() => setOpen(false)}
        />
        <NavItem
          to="/app/resources"
          icon={IconName.Resources}
          label="Resources"
          onClick={() => setOpen(false)}
        />
      </div>

      <div className="p-4 border-t border-gray-200 dark:border-gray-700">
        <div className="flex items-center mb-4">
          <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white font-bold text-lg mr-3">
            {user.name ? user.name.charAt(0).toUpperCase() : "G"}
          </div>
          <div>
            <p className="font-semibold text-light-text dark:text-dark-text">
              {user.name || "Guest User"}
            </p>
            <p className="text-sm text-light-subtle dark:text-dark-subtle">
              {user.email || ""}
            </p>
          </div>
        </div>
        <button
          onClick={handleLogout}
          className="w-full flex items-center px-4 py-3 text-lg font-medium rounded-lg transition-colors text-light-subtle dark:text-dark-subtle hover:bg-gray-200 dark:hover:bg-gray-700"
        >
          <Icon name={IconName.Logout} className="w-6 h-6 mr-4" />
          <span>Logout</span>
        </button>
      </div>
    </>
  );

  return (
    <>
      {/* Mobile overlay */}
      <div
        className={`fixed inset-0 bg-black bg-opacity-50 z-30 md:hidden transition-opacity ${
          isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
        }`}
        onClick={() => setOpen(false)}
      ></div>

      {/* Sidebar */}
      <aside
        className={`fixed top-0 left-0 w-72 h-full bg-light-card dark:bg-dark-card shadow-lg flex flex-col z-40 transform transition-transform md:relative md:w-72 md:translate-x-0 md:shadow-none ${
          isOpen ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        {sidebarContent}
      </aside>
    </>
  );
};

export default Sidebar; /* Main container for the background effect */
.heartbeat-bg {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: -1;
  pointer-events: none;

  /* The detailed grid background */
  background-image: linear-gradient(
      rgba(110, 150, 120, 0.07) 1px,
      transparent 1px
    ),
    linear-gradient(90deg, rgba(110, 150, 120, 0.07) 1px, transparent 1px),
    linear-gradient(rgba(110, 150, 120, 0.12) 2px, transparent 2px),
    linear-gradient(90deg, rgba(110, 150, 120, 0.12) 2px, transparent 2px);
  background-size: 1rem 1rem, 1rem 1rem, 5rem 5rem, 5rem 5rem;

  /* Fade the edges for a seamless appearance */
  mask-image: linear-gradient(
    to right,
    transparent,
    white 5%,
    white 95%,
    transparent
  );
  -webkit-mask-image: linear-gradient(
    to right,
    transparent,
    white 5%,
    white 95%,
    transparent
  );
}

/* 
  This is the main scroller. It holds all three line layers.
*/
.heartbeat-scroller,
.heartbeat-scroller::before,
.heartbeat-scroller::after {
  content: "";
  position: absolute;
  width: 200%;
  height: 250px;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
  background-repeat: repeat-x;

  /* --- UPGRADE #2: STABLE MOVEMENT --- */
  /* We slow down the animations for a more calm and professional feel. */
  animation: seamless-scroll 15s linear infinite,
    /* Was 10s, now slower */ vertical-drift 12s ease-in-out infinite; /* Was 7s, now much slower and smoother */
}

/* LAYER 1: The Main, Brightest Line */
.heartbeat-scroller {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 800 100'%3E%3Cpath d='M0 50 H150 q5 -10 10 0 t10 0 L175 50 L180 55 L190 20 L200 65 L205 50 H240 q10 -20 20 0 t20 0 H800' stroke='currentColor' stroke-width='3' fill='none' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");

  /* --- UPGRADE #1: THE NEON EFFECT --- */
  /* We use a very bright, almost white-hot green for the core line. */
  color: #d1fae5; /* A very pale, bright green */
  z-index: 3;

  /* We stack multiple drop-shadows to create a realistic neon glow:
     1. A tight, bright inner glow (the tube itself).
     2. A medium, primary color bloom.
     3. A large, faint outer haze.
  */
  filter: drop-shadow(0 0 1px currentColor) drop-shadow(0 0 3px #4ade80)
    /* Tailwind Green 400 */ drop-shadow(0 0 10px #4ade80);
}

/* LAYER 2: The Secondary, Fainter Line */
.heartbeat-scroller::before {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 800 100'%3E%3Cpath d='M0 50 H200 L210 40 L220 60 L230 50 H300 L310 55 L320 45 L330 50 H800' stroke='currentColor' stroke-width='2' fill='none' stroke-linecap='round'/%3E%3C/svg%3E");
  color: #34d399; /* A standard clinical green */
  opacity: 0.4;
  background-size: 700px 100px; /* Different size for non-repeating pattern */
  z-index: 2;
  filter: drop-shadow(0 0 3px currentColor); /* A softer glow */
}

/* LAYER 3: The Faintest "Noise" Line */
.heartbeat-scroller::after {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 800 100'%3E%3Cpath d='M0 50 L50 52 L100 48 L150 50 L200 53 L250 47 L300 50 H800' stroke='currentColor' stroke-width='1.5' fill='none'/%3E%3C/svg%3E");
  color: #34d399;
  opacity: 0.2;
  background-size: 1100px 100px; /* Another different size */
  z-index: 1;
  filter: blur(0.5px); /* Just a blurry line, no strong glow */
}

/* --- THE KEYFRAME ANIMATIONS --- */

/* The main scrolling animation. */
@keyframes seamless-scroll {
  from {
    transform: translateX(0) translateY(-50%);
  }
  to {
    transform: translateX(-50%) translateY(-50%);
  }
}

/* The slow, stable vertical drift animation. */
@keyframes vertical-drift {
  0%,
  100% {
    top: 49%;
  }
  50% {
    top: 51%;
  }
} import React from "react";
import "./HeartbeatBackground.css"; // The CSS file will be updated next

const HeartbeatBackground: React.FC = () => {
  return (
    <div className="heartbeat-bg" aria-hidden="true">
      {/* 
        This is the single container that holds all three lines (main, before, after).
        This is the ONLY element we will animate, which is much more reliable.
      */}
      <div className="heartbeat-scroller" />
    </div>
  );
};

export default HeartbeatBackground; 
import React from 'react';

// An enum to manage icon names, promoting type safety and autocompletion.
export enum IconName {
  Chat,
  Journal,
  Analytics,
  Resources,
  Logout,
  Send,
  Spinner,
  User,
  Logo,
  Sun,
  Moon,
  Menu,
  Close,
  ChevronLeft,
  Desktop,
  Dashboard,
  Users,
  Content,
  Trash,
  Flag,
}

interface IconProps {
  name: IconName;
  className?: string;
}

const ICONS_MAP: Record<IconName, React.ReactNode> = {
  [IconName.Chat]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z" />
    </svg>
  ),
  [IconName.Journal]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
    </svg>
  ),
  [IconName.Analytics]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 3v11.25A2.25 2.25 0 006 16.5h12M3.75 3h16.5M3.75 3v1.5M16.5 3v1.5M12 16.5h3.375m-3.375 0h-3.375m3.375 0V3.75M12 16.5v3.375m0 0h3.375m-3.375 0h-3.375" />
    </svg>
  ),
  [IconName.Resources]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
    </svg>
  ),
  [IconName.Logout]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15M12 9l-3 3m0 0l3 3m-3-3h12.75" />
    </svg>
  ),
    [IconName.Send]: (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
      <path d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.519 60.519 0 0018.445-8.986.75.75 0 000-1.218A60.517 60.517 0 003.478 2.405z" />
    </svg>
  ),
  [IconName.Spinner]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  ),
  [IconName.User]: (
     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
        <path fillRule="evenodd" d="M18.685 19.097A9.723 9.723 0 0021.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 003.065 7.097A9.716 9.716 0 0012 21.75a9.716 9.716 0 006.685-2.653zm-12.54-1.285A7.486 7.486 0 0112 15a7.486 7.486 0 015.855 2.812A8.224 8.224 0 0112 20.25a8.224 8.224 0 01-5.855-2.438zM15.75 9a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" clipRule="evenodd" />
    </svg>
  ),
  [IconName.Logo]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M12 21v-8.25M15.75 21v-8.25M8.25 21v-8.25M3 9l9-6 9 6m-1.5 12V10.332A48.36 48.36 0 0012 9.75c-2.551 0-5.056.2-7.5.582V21M3 21h18M12 6.75h.008v.008H12V6.75z" />
   </svg>
  ),
  [IconName.Sun]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
    </svg>
  ),
  [IconName.Moon]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
    </svg>
  ),
  [IconName.Menu]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
    </svg>
  ),
  [IconName.Close]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
    </svg>
  ),
   [IconName.ChevronLeft]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
    </svg>
  ),
  [IconName.Desktop]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0115 18.257V17.25m6-12V15a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 15V5.25A2.25 2.25 0 015.25 3h13.5A2.25 2.25 0 0121 5.25z" />
    </svg>
  ),
  [IconName.Dashboard]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6A2.25 2.25 0 016 3.75h2.25A2.25 2.25 0 0110.5 6v2.25a2.25 2.25 0 01-2.25 2.25H6a2.25 2.25 0 01-2.25-2.25V6zM3.75 15.75A2.25 2.25 0 016 13.5h2.25a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 18v-2.25zM13.5 6a2.25 2.25 0 012.25-2.25H18A2.25 2.25 0 0120.25 6v2.25A2.25 2.25 0 0118 10.5h-2.25a2.25 2.25 0 01-2.25-2.25V6zM13.5 15.75a2.25 2.25 0 012.25-2.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-2.25A2.25 2.25 0 0113.5 18v-2.25z" />
    </svg>
  ),
  [IconName.Users]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m-7.5-2.962a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM12 21a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72M12 21a3 3 0 00-3.741-.479m4.682-2.72a9.094 9.094 0 013.741.479m-9.375 0a9.094 9.094 0 013.741.479M12 21v-9.125a3.75 3.75 0 013.75-3.75h.375a3.75 3.75 0 013.75 3.75V21m-9.375 0v-9.125a3.75 3.75 0 00-3.75-3.75H4.125a3.75 3.75 0 00-3.75 3.75V21" />
    </svg>
  ),
  [IconName.Content]: (
     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
    </svg>
  ),
  [IconName.Trash]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.134-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.067-2.09.921-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
    </svg>
  ),
  [IconName.Flag]: (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" d="M3 3v1.5M3 21v-6m0 0l2.77-.693a9 9 0 016.208.682l.108.054a9 9 0 006.086.71l3.114-.732a48.524 48.524 0 01-.005-10.499l-3.11.732a9 9 0 01-6.085-.711l-.108-.054a9 9 0 00-6.208-.682L3 4.5M3 15V4.5" />
    </svg>
  ),
};

const Icon: React.FC<IconProps> = ({ name, className = 'w-6 h-6' }) => {
  return <div className={className}>{ICONS_MAP[name]}</div>;
};

export default Icon; import React, { useState, useEffect, useRef } from 'react';
import { useTheme } from '../../contexts/ThemeContext';
import Icon, { IconName } from './Icon';

const ThemeToggle: React.FC = () => {
  const { theme, setTheme } = useTheme();
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const themeOptions = [
    { value: 'light', label: 'Light', icon: IconName.Sun },
    { value: 'dark', label: 'Dark', icon: IconName.Moon },
    { value: 'system', label: 'System', icon: IconName.Desktop },
  ] as const;

  const getActiveIcon = () => {
    if (theme === 'light') return IconName.Sun;
    if (theme === 'dark') return IconName.Moon;
    // For system, show what's currently active
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return IconName.Moon;
    }
    return IconName.Sun;
  }

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="p-2 rounded-full text-light-subtle dark:text-dark-subtle hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
        aria-label="Toggle theme"
      >
        <Icon name={getActiveIcon()} className="w-6 h-6" />
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-36 bg-light-card dark:bg-dark-card rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 py-1 z-50 animate-fade-in">
          {themeOptions.map(option => (
            <button
              key={option.value}
              onClick={() => {
                setTheme(option.value);
                setIsOpen(false);
              }}
              className={`w-full text-left flex items-center px-3 py-2 text-sm transition-colors ${
                theme === option.value
                  ? 'bg-primary text-white'
                  : 'text-light-text dark:text-dark-text hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              <Icon name={option.icon} className="w-5 h-5 mr-3" />
              {option.label}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default ThemeToggle; import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';

type Theme = 'light' | 'dark' | 'system';

interface ThemeContextType {
  theme: Theme;
  setTheme: (theme: Theme) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>(() => {
    // Get theme from local storage or default to 'system'
    return (localStorage.getItem('theme') as Theme) || 'system';
  });

  const applyTheme = useCallback((t: Theme) => {
    const root = window.document.documentElement;
    const isDark = t === 'dark' || (t === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
    
    // Using a class for light mode as well to avoid FOUC on initial load in some cases.
    root.classList.remove(isDark ? 'light' : 'dark');
    root.classList.add(isDark ? 'dark' : 'light');
  }, []);

  useEffect(() => {
    applyTheme(theme);
    localStorage.setItem('theme', theme);

    if (theme === 'system') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const handleChange = () => applyTheme('system');
      
      mediaQuery.addEventListener('change', handleChange);
      return () => mediaQuery.removeEventListener('change', handleChange);
    }
  }, [theme, applyTheme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}; 
import React, { useState, useEffect } from "react";
import { fetchApi } from "../../services/api";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";

const COLORS = ["#FF8042", "#FFBB28", "#00C49F", "#0088FE", "#8884d8"];

const AdminDashboardPage: React.FC = () => {
  const [stats, setStats] = useState({
    userCount: 0,
    journalCount: 0,
    flaggedCount: 0,
  });
  const [signupData, setSignupData] = useState([]);
  const [moodData, setMoodData] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        const [statsData, signups, moods] = await Promise.all([
          fetchApi("/admin/dashboard"),
          fetchApi("/admin/dashboard/signups"),
          fetchApi("/admin/dashboard/moods"),
        ]);
        setStats(statsData);
        setSignupData(signups);
        setMoodData(moods);
      } catch (error) {
        console.error("Failed to fetch dashboard data", error);
      } finally {
        setLoading(false);
      }
    };
    fetchDashboardData();
  }, []);

  if (loading) {
    return <div>Loading Dashboard...</div>;
  }

  return (
    <div className="animate-fade-in-up space-y-8">
      <h1 className="text-3xl font-bold">Admin Dashboard</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-light-card dark:bg-dark-card p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-bold text-light-subtle dark:text-dark-subtle">
            Registered Users
          </h3>
          <p className="text-4xl font-bold text-primary">{stats.userCount}</p>
        </div>
        <div className="bg-light-card dark:bg-dark-card p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-bold text-light-subtle dark:text-dark-subtle">
            Total Journal Entries
          </h3>
          <p className="text-4xl font-bold text-secondary">
            {stats.journalCount}
          </p>
        </div>
        <div className="bg-light-card dark:bg-dark-card p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-bold text-light-subtle dark:text-dark-subtle">
            Flagged Content
          </h3>
          <p className="text-4xl font-bold text-accent">{stats.flaggedCount}</p>
        </div>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
        <div className="xl:col-span-2 bg-light-card dark:bg-dark-card p-6 rounded-lg shadow-lg">
          <h2 className="text-2xl font-semibold mb-4">
            User Signups (Last 7 Days)
          </h2>
          <div className="h-72">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={signupData}
                margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.2} />
                <XAxis dataKey="name" />
                <YAxis allowDecimals={false} />
                <Tooltip />
                <Bar
                  dataKey="signups"
                  name="New Users"
                  fill="#3B82F6"
                  radius={[4, 4, 0, 0]}
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
        <div className="bg-light-card dark:bg-dark-card p-6 rounded-lg shadow-lg">
          <h2 className="text-2xl font-semibold mb-4">
            Overall Mood Distribution
          </h2>
          <div className="h-72">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={moodData}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                  label
                >
                  {moodData.map((_, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboardPage; import React, { useState, useEffect } from "react";
import Icon, { IconName } from "../../components/ui/Icon";
import { fetchApi } from "../../services/api";

interface Quote {
  _id: string;
  text: string;
}

const ContentManagementPage: React.FC = () => {
  const [quotes, setQuotes] = useState<Quote[]>([]);
  const [newQuote, setNewQuote] = useState("");

  const fetchQuotes = async () => {
    try {
      const fetchedQuotes = await fetchApi("/admin/quotes", "GET");
      setQuotes(fetchedQuotes);
    } catch (error) {
      console.error("Failed to fetch quotes:", error);
    }
  };

  useEffect(() => {
    fetchQuotes();
  }, []);

  const handleAddQuote = async () => {
    if (newQuote.trim() === "") return;
    try {
      await fetchApi("/admin/quotes", "POST", { text: newQuote.trim() });
      setNewQuote("");
      fetchQuotes(); // Re-fetch to get the latest list
    } catch (error) {
      console.error("Failed to add quote:", error);
    }
  };

  const handleDeleteQuote = async (quoteId: string) => {
    if (window.confirm("Are you sure you want to delete this quote?")) {
      try {
        await fetchApi(`/admin/quotes/${quoteId}`, "DELETE");
        fetchQuotes(); // Re-fetch to update the list
      } catch (error) {
        console.error("Failed to delete quote:", error);
      }
    }
  };

  return (
    <div className="animate-fade-in-up space-y-8">
      <h1 className="text-3xl font-bold">Content Management</h1>

      <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-8">
        <h2 className="text-2xl font-semibold mb-4 text-light-text dark:text-dark-text">
          Motivational Quotes
        </h2>
        <p className="text-light-subtle dark:text-dark-subtle mb-6">
          Add or remove the motivational quotes that are shown to users on their
          dashboard.
        </p>

        <div className="space-y-4">
          <div>
            <label
              htmlFor="quote"
              className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1"
            >
              New Motivational Quote
            </label>
            <div className="flex flex-col sm:flex-row gap-4">
              <input
                id="quote"
                value={newQuote}
                onChange={(e) => setNewQuote(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleAddQuote()}
                placeholder="The secret of getting ahead is getting started."
                className="flex-grow p-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
              />
              <button
                type="button"
                onClick={handleAddQuote}
                disabled={!newQuote.trim()}
                className="flex-shrink-0 bg-primary text-white font-semibold py-2 px-6 rounded-lg shadow-md hover:bg-primary-focus focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-focus transition disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Add Quote
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-8">
        <h3 className="text-xl font-semibold mb-4">
          Current Quotes ({quotes.length})
        </h3>
        <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
          {quotes.length > 0 ? (
            quotes.map((quote) => (
              <div
                key={quote._id}
                className="flex items-center justify-between gap-4 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg"
              >
                <p className="italic text-light-text dark:text-dark-text">
                  "{quote.text}"
                </p>
                <button
                  onClick={() => handleDeleteQuote(quote._id)}
                  className="p-2 flex-shrink-0 text-red-500 hover:text-red-700 dark:hover:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/50 rounded-full transition-colors"
                  aria-label="Delete quote"
                >
                  <Icon name={IconName.Trash} className="w-5 h-5" />
                </button>
              </div>
            ))
          ) : (
            <div className="text-center py-8 px-4 text-light-subtle dark:text-dark-subtle">
              <Icon
                name={IconName.Content}
                className="mx-auto w-12 h-12 opacity-50 mb-4"
              />
              <p>No custom quotes found.</p>
              <p className="text-sm">Add a quote above to get started.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ContentManagementPage; import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
// --- FIX: We will re-define the type here to include `_id` ---
// import { FlaggedContent } from '../../types'; // This line can be removed or commented out
import Icon, { IconName } from "../../components/ui/Icon";
import { fetchApi } from "../../services/api";

// --- FIX: Define the correct shape of the data coming from the MongoDB backend ---
interface FlaggedContent {
  _id: string; // MongoDB uses _id
  userEmail: string;
  content: string;
  type: "Journal" | "Chat";
  date: string;
  resolved: boolean;
}

const FlaggedContentPage: React.FC = () => {
  const [flags, setFlags] = useState<FlaggedContent[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchFlags = async () => {
      try {
        setLoading(true);
        const fetchedFlags = await fetchApi("/admin/flags", "GET");
        setFlags(fetchedFlags);
      } catch (error) {
        console.error("Failed to fetch flagged content:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchFlags();
  }, []);

  const handleResolveFlag = async (flagId: string) => {
    if (
      window.confirm(
        "Are you sure you want to resolve this flag? It will be removed from this list."
      )
    ) {
      try {
        await fetchApi(`/admin/flags/${flagId}/resolve`, "PUT");
        setFlags((currentFlags) =>
          currentFlags.filter((flag) => flag._id !== flagId)
        );
      } catch (error) {
        console.error("Failed to resolve flag:", error);
        alert("Could not resolve the flag. Please try again.");
      }
    }
  };

  if (loading) {
    return <div>Loading flagged content...</div>;
  }

  return (
    <div className="animate-fade-in-up">
      <h1 className="text-3xl font-bold mb-2">Flagged Content</h1>
      <p className="text-light-subtle dark:text-dark-subtle mb-8">
        Review content automatically flagged by the system for sensitive
        keywords.
      </p>

      <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full text-left">
            <thead className="bg-gray-100 dark:bg-gray-800">
              <tr>
                <th className="p-4 font-semibold">User</th>
                <th className="p-4 font-semibold">Type</th>
                <th className="p-4 font-semibold">Content</th>
                <th className="p-4 font-semibold">Date</th>
                <th className="p-4 font-semibold text-right">Actions</th>
              </tr>
            </thead>
            <tbody>
              {flags.length > 0 ? (
                flags.map((flag) => (
                  <tr
                    key={flag._id}
                    className="border-t border-gray-200 dark:border-gray-700"
                  >
                    <td className="p-4">
                      <Link
                        to={`/admin/users/${encodeURIComponent(
                          flag.userEmail
                        )}`}
                        className="hover:underline text-primary"
                      >
                        {flag.userEmail}
                      </Link>
                    </td>
                    <td className="p-4">
                      <span
                        className={`px-2 py-1 text-xs font-semibold rounded-full ${
                          flag.type === "Chat"
                            ? "bg-blue-100 text-blue-800"
                            : "bg-green-100 text-green-800"
                        }`}
                      >
                        {flag.type}
                      </span>
                    </td>
                    <td className="p-4 max-w-sm">
                      <p className="italic truncate text-light-subtle dark:text-dark-subtle">
                        "{flag.content}"
                      </p>
                    </td>
                    <td className="p-4 text-sm text-light-subtle dark:text-dark-subtle">
                      {new Date(flag.date).toLocaleString()}
                    </td>
                    <td className="p-4 text-right">
                      <button
                        onClick={() => handleResolveFlag(flag._id)}
                        className="flex items-center justify-end ml-auto text-secondary hover:text-green-700 font-medium"
                        aria-label={`Resolve flag for ${flag.userEmail}`}
                      >
                        <span>Resolve</span>
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan={5}
                    className="text-center p-8 text-light-subtle dark:text-dark-subtle"
                  >
                    <div className="flex flex-col items-center">
                      <Icon
                        name={IconName.Flag}
                        className="w-12 h-12 opacity-30 mb-4"
                      />
                      No flagged content found.
                    </div>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default FlaggedContentPage; import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import Icon, { IconName } from "../../components/ui/Icon";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { fetchApi } from "../../services/api";
import { Mood, MoodLog } from "../../types"; // Re-importing necessary types

const moodOptions = [
  { mood: Mood.Awful, emoji: "😞", label: "Awful" },
  { mood: Mood.Bad, emoji: "🙁", label: "Bad" },
  { mood: Mood.Okay, emoji: "😐", label: "Okay" },
  { mood: Mood.Good, emoji: "🙂", label: "Good" },
  { mood: Mood.Great, emoji: "😄", label: "Great" },
];

const UserDetailsPage: React.FC = () => {
  const { userEmail } = useParams<{ userEmail: string }>();
  const [loading, setLoading] = useState(true);
  const [userData, setUserData] = useState<any>(null);

  useEffect(() => {
    const fetchDetails = async () => {
      if (userEmail) {
        try {
          setLoading(true);
          const decodedEmail = decodeURIComponent(userEmail);
          const data = await fetchApi(`/users/${decodedEmail}`);
          setUserData(data);
        } catch (error) {
          console.error("Failed to fetch user details:", error);
          setUserData(null);
        } finally {
          setLoading(false);
        }
      }
    };
    fetchDetails();
  }, [userEmail]);

  const getChartData = () => {
    if (!userData?.moodLogs) return [];
    const last30Days = Array.from({ length: 30 }, (_, i) => {
      const d = new Date();
      d.setDate(d.getDate() - i);
      return d;
    }).reverse();

    return last30Days.map((date) => {
      const dateString = date.toISOString().split("T")[0];
      const log = userData.moodLogs.find((l: MoodLog) => l.date === dateString);
      return {
        name: date.toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
        }),
        mood: log ? log.mood : null,
      };
    });
  };

  if (loading) {
    return <div className="text-center p-8">Loading user details...</div>;
  }

  if (!userData) {
    return <div className="text-center p-8">User not found.</div>;
  }

  const { user, journalEntries, chatMessages } = userData;

  return (
    <div className="animate-fade-in-up space-y-8">
      <div>
        <Link
          to="/admin/users"
          className="flex items-center text-sm text-light-subtle dark:text-dark-subtle hover:text-primary mb-4"
        >
          <Icon name={IconName.ChevronLeft} className="w-4 h-4 mr-1" />
          Back to User Management
        </Link>
        <h1 className="text-3xl font-bold">User Details</h1>
        <p className="text-xl text-light-subtle dark:text-dark-subtle">
          {user.name} ({user.email})
        </p>
      </div>

      <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-bold mb-4">Mood History (Last 30 Days)</h2>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={getChartData()}
              margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.2} />
              <XAxis dataKey="name" />
              <YAxis
                domain={[0, 5]}
                ticks={[1, 2, 3, 4, 5]}
                tickFormatter={(val) =>
                  moodOptions.find((o) => o.mood === val)?.emoji || ""
                }
              />
              <Tooltip
                contentStyle={{
                  backgroundColor: "#1F2937",
                  border: "none",
                  borderRadius: "8px",
                }}
                labelStyle={{ color: "#F9FAFB" }}
                formatter={(value: number) => [
                  moodOptions.find((o) => o.mood === value)?.label || "No log",
                  "Mood",
                ]}
              />
              <Bar dataKey="mood" fill="#3B82F6" barSize={20} />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-bold mb-4">
            Journal Entries ({journalEntries.length})
          </h2>
          <div className="space-y-4 max-h-96 overflow-y-auto pr-2">
            {journalEntries.length > 0 ? (
              journalEntries.map((entry: any) => (
                <div
                  key={entry._id}
                  className="p-3 bg-gray-100 dark:bg-gray-800 rounded-lg"
                >
                  <p className="font-semibold text-sm mb-1">
                    {new Date(entry.date).toLocaleString()}
                  </p>
                  <p className="whitespace-pre-wrap text-light-text dark:text-dark-text">
                    {entry.content}
                  </p>
                </div>
              ))
            ) : (
              <p className="text-light-subtle dark:text-dark-subtle">
                No journal entries found.
              </p>
            )}
          </div>
        </div>
        <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-bold mb-4">
            Chat History ({chatMessages.length})
          </h2>
          <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
            {chatMessages.length > 0 ? (
              chatMessages.map((msg: any) => (
                <div
                  key={msg._id}
                  className={`flex items-start gap-2 ${
                    msg.role === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`max-w-md px-3 py-2 rounded-lg ${
                      msg.role === "user"
                        ? "bg-primary/20"
                        : "bg-gray-100 dark:bg-gray-800"
                    }`}
                  >
                    <p className="text-sm">{msg.text}</p>
                    <p className="text-xs text-right mt-1 text-light-subtle/70 dark:text-dark-subtle/70">
                      {new Date(msg.timestamp).toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              ))
            ) : (
              <p className="text-light-subtle dark:text-dark-subtle">
                No chat history found.
              </p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserDetailsPage; import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Icon, { IconName } from "../../components/ui/Icon";
import { fetchApi } from "../../services/api";

// FIX: Define an interface for the User object
interface User {
  _id: string;
  name: string;
  email: string;
  signupDate: string;
}

const UserManagementPage: React.FC = () => {
  // FIX: Provide the User interface to useState
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      const data = await fetchApi("/users", "GET");
      setUsers(data);
    } catch (error) {
      console.error("Failed to fetch users:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // FIX: Add type 'string' to the function parameter
  const handleDeleteUser = async (emailToDelete: string) => {
    if (
      window.confirm(
        `Are you sure you want to delete the user with email: ${emailToDelete}? This action is irreversible.`
      )
    ) {
      try {
        await fetchApi(`/users/${emailToDelete}`, "DELETE");
        fetchUsers(); // Refresh the user list
      } catch (error) {
        console.error("Failed to delete user:", error);
        alert("Failed to delete user. Please try again.");
      }
    }
  };

  if (loading) {
    return <div>Loading users...</div>;
  }

  return (
    <div className="animate-fade-in-up">
      <h1 className="text-3xl font-bold mb-8">User Management</h1>
      <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full text-left">
            {/* Table Head */}
            <thead className="bg-gray-100 dark:bg-gray-800">
              <tr>
                <th className="p-4 font-semibold">Name</th>
                <th className="p-4 font-semibold">Email</th>
                <th className="p-4 font-semibold">Signup Date</th>
                <th className="p-4 font-semibold text-center">Actions</th>
              </tr>
            </thead>
            {/* Table Body */}
            <tbody>
              {users.length > 0 ? (
                users.map((user) => (
                  <tr
                    key={user.email}
                    className="border-t border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50"
                  >
                    <td className="p-4 font-medium">
                      <Link
                        to={`/admin/users/${encodeURIComponent(user.email)}`}
                        className="hover:underline text-primary"
                      >
                        {user.name}
                      </Link>
                    </td>
                    <td className="p-4">{user.email}</td>
                    <td className="p-4 text-sm text-light-subtle dark:text-dark-subtle">
                      {new Date(user.signupDate).toLocaleDateString()}
                    </td>
                    <td className="p-4 text-center">
                      <button
                        onClick={() => handleDeleteUser(user.email)}
                        className="p-2 text-red-500 hover:text-red-700 dark:hover:text-red-400 font-medium transition-colors hover:bg-red-100 dark:hover:bg-red-900/50 rounded-full"
                        aria-label={`Delete user ${user.name}`}
                      >
                        <Icon name={IconName.Trash} className="w-5 h-5" />
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan={4}
                    className="text-center p-8 text-light-subtle dark:text-dark-subtle"
                  >
                    No registered users found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default UserManagementPage; 
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import Icon, { IconName } from '../components/ui/Icon';

const AdminLoginPage: React.FC = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const navigate = useNavigate();

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        setError('');

        // Hardcoded admin credentials
        if (username === 'admin' && password === 'password') {
            localStorage.setItem('adminAuthToken', 'fake-admin-jwt-token');
            navigate('/admin/dashboard');
        } else {
            setError('Invalid admin credentials.');
        }
    };

    return (
        <div className="min-h-screen bg-light-bg dark:bg-dark-bg flex items-center justify-center p-4 animate-fade-in">
            <div className="max-w-md w-full bg-light-card dark:bg-dark-card rounded-2xl shadow-xl p-8">
                 <Link to="/" className="absolute top-4 left-4 flex items-center text-light-subtle dark:text-dark-subtle hover:text-primary transition-colors">
                    <Icon name={IconName.ChevronLeft} className="w-5 h-5 mr-1" />
                    Back to Home
                </Link>
                <div className="text-center mb-8">
                    <h2 className="text-3xl font-bold text-light-text dark:text-dark-text">Admin Portal</h2>
                    <p className="text-light-subtle dark:text-dark-subtle mt-2">Please log in to continue.</p>
                </div>

                <form onSubmit={handleSubmit} className="space-y-6">
                    <div>
                        <label htmlFor="username" className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1">Username</label>
                        <input
                            id="username"
                            type="text"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            placeholder="admin"
                            className="w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
                            required
                        />
                    </div>
                    <div>
                        <label htmlFor="password" className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1">Password</label>
                        <input
                            id="password"
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="••••••••"
                            className="w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
                            required
                        />
                    </div>
                    
                    {error && <p className="text-red-500 text-sm text-center">{error}</p>}

                    <div>
                        <button
                            type="submit"
                            className="w-full bg-primary text-white font-semibold py-3 px-4 rounded-lg shadow-md hover:bg-primary-focus focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-focus transition-transform transform hover:scale-105"
                        >
                            Log In
                        </button>
                    </div>
                </form>
                <p className="text-center text-xs text-light-subtle dark:text-dark-subtle mt-4">
                    (Use username: admin, password: password)
                </p>
            </div>
        </div>
    );
};

export default AdminLoginPage; 
import React, { useState, useEffect, useCallback } from "react";
import { Mood, MoodLog } from "../types";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { getMotivationalQuote } from "../services/geminiService";
import { fetchApi } from "../services/api";

const moodOptions = [
  { mood: Mood.Awful, emoji: "😞", label: "Awful" },
  { mood: Mood.Bad, emoji: "🙁", label: "Bad" },
  { mood: Mood.Okay, emoji: "😐", label: "Okay" },
  { mood: Mood.Good, emoji: "🙂", label: "Good" },
  { mood: Mood.Great, emoji: "😄", label: "Great" },
];

const AnalyticsPage: React.FC = () => {
  const [moodLogs, setMoodLogs] = useState<MoodLog[]>([]);
  const [quote, setQuote] = useState("");
  const [isLoadingQuote, setIsLoadingQuote] = useState(true);
  const user = JSON.parse(localStorage.getItem("user") || "{}");
  const isGuest = !user?.token;

  const today = new Date().toISOString().split("T")[0];
  const todaysLog = moodLogs.find((log) => log.date === today);

  const fetchData = useCallback(async () => {
    if (isGuest) {
      setIsLoadingQuote(false);
      setQuote("Sign up to track your mood and get personalized insights.");
      return;
    }

    try {
      const savedLogs = await fetchApi("/moods");
      setMoodLogs(savedLogs);
    } catch (error) {
      console.error("Failed to fetch mood logs", error);
    }

    setIsLoadingQuote(true);
    try {
      const adminQuotes = await fetchApi("/admin/quotes");
      const q = await getMotivationalQuote(adminQuotes);
      setQuote(q);
    } catch (error) {
      console.error("Failed to fetch quote", error);
      setQuote(
        "The best way to get started is to quit talking and begin doing."
      );
    } finally {
      setIsLoadingQuote(false);
    }
  }, [isGuest]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleMoodLog = async (mood: Mood) => {
    if (isGuest) return;
    try {
      const newLog = await fetchApi("/moods", "POST", { date: today, mood });
      setMoodLogs((prevLogs) => [
        ...prevLogs.filter((log) => log.date !== today),
        newLog,
      ]);
    } catch (error) {
      console.error("Failed to log mood", error);
    }
  };

  // FIX: This function must RETURN an array for the chart's data prop.
  const getChartData = () => {
    const last7Days = Array.from({ length: 7 }, (_, i) => {
      const d = new Date();
      d.setDate(d.getDate() - i);
      return d;
    }).reverse();

    return last7Days.map((date) => {
      const dateString = date.toISOString().split("T")[0];
      const log = moodLogs.find((l) => l.date === dateString);
      return {
        name: date.toLocaleDateString("en-US", { weekday: "short" }),
        mood: log ? log.mood : 0,
      };
    });
  };

  return (
    <div className="space-y-8 animate-fade-in-up">
      <h1 className="text-3xl font-bold">My Wellness Dashboard</h1>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-bold mb-4">Your Mood This Week</h2>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              {/* FIX: The BarChart and its children are now included */}
              <BarChart
                data={getChartData()}
                margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.2} />
                <XAxis dataKey="name" />
                <YAxis
                  domain={[0, 5]}
                  ticks={[1, 2, 3, 4, 5]}
                  tickFormatter={(val) =>
                    moodOptions.find((o) => o.mood === val)?.emoji || ""
                  }
                />
                <Tooltip
                  contentStyle={{
                    backgroundColor: "#1F2937",
                    border: "none",
                    borderRadius: "8px",
                  }}
                  labelStyle={{ color: "#F9FAFB" }}
                  formatter={(value: number) => [
                    moodOptions.find((o) => o.mood === value)?.label,
                    "Mood",
                  ]}
                />
                <Bar
                  dataKey="mood"
                  fill="#3B82F6"
                  barSize={30}
                  radius={[4, 4, 0, 0]}
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
        <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-6 flex flex-col justify-center">
          <h2 className="text-xl font-bold mb-4">How are you feeling today?</h2>
          {isGuest ? (
            <p>Mood tracking is disabled in guest mode.</p>
          ) : todaysLog ? (
            <div>
              <p>Today you're feeling:</p>
              <span>
                {moodOptions.find((o) => o.mood === todaysLog.mood)?.emoji}
              </span>
            </div>
          ) : (
            <div>
              {moodOptions.map(({ mood, emoji, label }) => (
                <button key={mood} onClick={() => handleMoodLog(mood)}>
                  <span>{emoji}</span>
                  <span>{label}</span>
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
      <div className="bg-gradient-to-r from-secondary to-primary text-white rounded-lg shadow-lg p-8">
        <h2>Quote of the Day</h2>
        {isLoadingQuote ? (
          <p>Loading...</p>
        ) : (
          <blockquote>"{quote}"</blockquote>
        )}
      </div>
    </div>
  );
};

export default AnalyticsPage; import React, { useState, useEffect, useRef, useCallback } from "react";
import { ChatMessage } from "../types";
import {
  startChatAndStreamResponse,
  checkForFlags,
} from "../services/geminiService";
import Icon, { IconName } from "../components/ui/Icon";

const ChatPage: React.FC = () => {
  // --- All of this logic is UNCHANGED ---
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const user = JSON.parse(localStorage.getItem("user") || "{}");
  const isGuest = !user?.token;
  const chatHistoryKey = `chatHistory_${user.email || "guest"}`;

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages]);

  const loadChatHistory = useCallback(() => {
    const savedMessages = localStorage.getItem(chatHistoryKey);
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    } else {
      setMessages([
        {
          id: "initial",
          role: "model",
          text: isGuest
            ? "Hello! As a guest, your conversation will not be saved. How are you feeling today?"
            : `Welcome back, ${user.name}! How are you feeling today?`,
          timestamp: new Date().toISOString(),
        },
      ]);
    }
  }, [isGuest, user.name, chatHistoryKey]);

  useEffect(() => {
    loadChatHistory();
  }, [loadChatHistory]);

  const handleSend = async () => {
    if (input.trim() === "" || isLoading) return;

    await checkForFlags(input, user.email, "Chat");

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: "user",
      text: input,
      timestamp: new Date().toISOString(),
    };

    setMessages((prev) => [...prev, userMessage]);

    const currentInput = input;
    setInput("");
    setIsLoading(true);

    const chatHistoryForApi = [...messages, userMessage]
      .filter((m) => m.id !== "initial")
      .slice(-10)
      .map((m) => ({
        role: m.role,
        parts: [{ text: m.text }],
      }));

    let aiResponseText = "";
    const aiResponseId = (Date.now() + 1).toString();

    setMessages((prev) => [
      ...prev,
      {
        id: aiResponseId,
        role: "model",
        text: "", // Start empty for the typing indicator
        timestamp: new Date().toISOString(),
      },
    ]);

    await startChatAndStreamResponse(
      chatHistoryForApi,
      currentInput,
      (chunk) => {
        aiResponseText += chunk;
        setMessages((prev) =>
          prev.map((msg) =>
            msg.id === aiResponseId ? { ...msg, text: aiResponseText } : msg
          )
        );
      }
    );

    setIsLoading(false);
  };

  // --- All of the JSX below has been re-styled ---
  return (
    <div className="flex flex-col h-[calc(100vh-140px)] max-w-4xl mx-auto animate-fade-in-up">
      {/* CHAT MESSAGE AREA */}
      <div className="flex-1 overflow-y-auto p-4 space-y-6">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`flex items-end gap-3 ${
              msg.role === "user" ? "justify-end" : "justify-start"
            }`}
          >
            {/* AI Avatar */}
            {msg.role === "model" && (
              <div className="w-10 h-10 rounded-full bg-secondary/20 text-secondary flex-shrink-0 flex items-center justify-center">
                <Icon name={IconName.Chat} className="w-6 h-6" />
              </div>
            )}

            {/* Message Bubble */}
            <div
              className={`max-w-lg px-4 py-3 rounded-2xl shadow-md ${
                msg.role === "user"
                  ? "bg-primary text-white rounded-br-none" // User bubble style
                  : "bg-light-card dark:bg-dark-card rounded-bl-none" // AI bubble style
              }`}
            >
              {/* Show typing indicator or message text */}
              {msg.text ? (
                <p className="text-base">{msg.text}</p>
              ) : (
                <div className="flex items-center space-x-2 text-light-subtle dark:text-dark-subtle">
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                </div>
              )}
            </div>

            {/* User Avatar */}
            {msg.role === "user" && (
              <div className="w-10 h-10 rounded-full bg-primary/20 text-primary flex-shrink-0 flex items-center justify-center">
                <Icon name={IconName.User} className="w-6 h-6" />
              </div>
            )}
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      {/* INPUT AREA */}
      <div className="p-4 border-t border-gray-200 dark:border-gray-700">
        <div className="relative">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleSend()}
            placeholder="Type your message..."
            className="w-full pl-4 pr-12 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-full focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
            disabled={isLoading}
          />
          <button
            onClick={handleSend}
            disabled={isLoading || !input.trim()}
            className="absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-full text-white bg-primary hover:bg-primary-focus disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-focus"
          >
            <Icon name={IconName.Send} className="w-6 h-6" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatPage; import React from "react";
import { useNavigate, Link } from "react-router-dom";
import Icon, { IconName } from "../components/ui/Icon"; // Assuming your Icon component is here

const ErrorPage: React.FC = () => {
  const navigate = useNavigate();

  const handleGoHome = () => {
    navigate("/"); // Navigate to the homepage
  };

  return (
    <div className="min-h-screen bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text flex flex-col items-center justify-center p-4 font-sans animate-fade-in text-center">
      {/* A suitable icon that fits the theme of guidance and calm. */}
      {/* I'm using 'Logo' as I know it exists in your project. A compass or map icon would also be great. */}
      <div className="w-24 h-24 mb-6 bg-primary/10 text-primary rounded-full flex items-center justify-center animate-pulse-subtle">
        <Icon name={IconName.Logo} className="w-12 h-12" />
      </div>

      {/* A thematic and reassuring headline */}
      <h1
        className="text-4xl md:text-6xl font-bold mb-4 animate-fade-in-up"
        style={{ animationDelay: "0.2s" }}
      >
        A Moment of Stillness
      </h1>

      {/* A helpful, non-technical explanation */}
      <p
        className="max-w-xl text-lg md:text-xl text-light-subtle dark:text-dark-subtle mb-8 animate-fade-in-up"
        style={{ animationDelay: "0.4s" }}
      >
        It seems the path you were looking for has drifted away. Not all who
        wander are lost, but let's guide you back to a familiar place.
      </p>

      {/* A big, clear, actionable button */}
      <button
        onClick={handleGoHome}
        className="flex items-center gap-2 px-8 py-4 bg-primary text-white font-semibold rounded-lg shadow-lg hover:bg-primary-focus transition-transform transform hover:scale-105 animate-fade-in-up"
        style={{ animationDelay: "0.6s" }}
      >
        <Icon name={IconName.ChevronLeft} className="w-6 h-6" />
        Return to a Calm Space
      </button>

      {/* A subtle footer for alternative navigation */}
      <footer className="absolute bottom-8 text-center text-sm text-light-subtle dark:text-dark-subtle">
        <p>© {new Date().getFullYear()} SereneMind AI</p>
      </footer>
    </div>
  );
};

export default ErrorPage; import React from "react";
import { useNavigate } from "react-router-dom";
import Icon, { IconName } from "../components/ui/Icon";
import ThemeToggle from "../components/ui/ThemeToggle";
// --- FIX: Import the new background component ---
import HeartbeatBackground from "../components/ui/HeartbeatBackground";

const HomePage: React.FC = () => {
  const navigate = useNavigate();

  const handleGetStarted = () => {
    navigate("/signup");
  };

  const handleGuest = () => {
    localStorage.setItem(
      "user",
      JSON.stringify({ name: "Guest", isGuest: true })
    );
    localStorage.setItem("authToken", "guest-token");
    navigate("/app/chat");
  };

  return (
    // --- FIX: Background colors are removed from here to let the animation show through ---
    // The body tag already sets the base bg color.
    <div className="relative min-h-screen text-light-text dark:text-dark-text flex flex-col items-center justify-center p-4 font-sans animate-fade-in overflow-hidden">
      {/* --- FIX: Add the new animated background component --- */}
      <HeartbeatBackground />

      {/* The z-index will keep the header and main content on top of the background */}
      <header className="absolute top-0 left-0 right-0 p-4 flex justify-between items-center z-10">
        <div className="flex items-center space-x-2">
          <Icon name={IconName.Logo} className="w-8 h-8 text-primary" />
          <span className="text-xl font-bold">SereneMind AI</span>
        </div>
        <div className="flex items-center gap-4">
          <button
            onClick={() => navigate("/login")}
            className="px-4 py-2 text-sm font-medium rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
          >
            Login
          </button>
          <ThemeToggle />
        </div>
      </header>

      <main className="text-center flex flex-col items-center z-10">
        <div className="w-24 h-24 mb-6 bg-primary/20 text-primary rounded-full flex items-center justify-center animate-pulse-subtle">
          <Icon name={IconName.Chat} className="w-12 h-12" />
        </div>
        <h1
          className="text-4xl md:text-6xl font-bold mb-4 animate-fade-in-up"
          style={{ animationDelay: "0.2s" }}
        >
          Find Your Calm.
        </h1>
        <p
          className="max-w-2xl text-lg md:text-xl text-light-subtle dark:text-dark-subtle mb-8 animate-fade-in-up"
          style={{ animationDelay: "0.4s" }}
        >
          Your private, AI-powered companion for mental wellness. Chat, journal,
          and reflect in a safe and supportive space.
        </p>
        <div
          className="flex flex-col sm:flex-row gap-4 animate-fade-in-up"
          style={{ animationDelay: "0.6s" }}
        >
          <button
            onClick={handleGetStarted}
            className="px-8 py-4 bg-primary text-white font-semibold rounded-lg shadow-lg hover:bg-primary-focus transition-transform transform hover:scale-105"
          >
            Get Started for Free
          </button>
          <button
            onClick={handleGuest}
            className="px-8 py-4 bg-gray-200 dark:bg-gray-700 font-semibold rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
          >
            Continue as Guest
          </button>
        </div>
      </main>

      <footer className="absolute bottom-4 text-center text-sm text-light-subtle dark:text-dark-subtle z-10">
        <p>© {new Date().getFullYear()} SereneMind AI. All rights reserved.</p>
      </footer>
    </div>
  );
};

export default HomePage; 
import React, { useState, useEffect, useCallback } from "react";
import {
  summarizeJournalEntry,
  checkForFlags,
} from "../services/geminiService";
import Icon, { IconName } from "../components/ui/Icon";
import { fetchApi } from "../services/api";

interface JournalEntry {
  _id: string;
  date: string;
  content: string;
  summary?: string;
}

const JournalPage: React.FC = () => {
  const [entries, setEntries] = useState<JournalEntry[]>([]);
  const [currentContent, setCurrentContent] = useState("");
  const [selectedEntry, setSelectedEntry] = useState<JournalEntry | null>(null);
  const [isSummarizing, setIsSummarizing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  const user = JSON.parse(localStorage.getItem("user") || "{}");
  const isGuest = !user?.token;

  const loadJournalEntries = useCallback(async () => {
    if (isGuest) {
      setIsLoading(false);
      return;
    }
    try {
      setIsLoading(true);
      const fetchedEntries = await fetchApi("/journal");
      setEntries(fetchedEntries);
    } catch (error) {
      console.error("Failed to load journal entries", error);
    } finally {
      setIsLoading(false);
    }
  }, [isGuest]);

  useEffect(() => {
    loadJournalEntries();
  }, [loadJournalEntries]);

  const handleSaveEntry = async () => {
    if (currentContent.trim() === "" || isGuest) return;
    await checkForFlags(currentContent, user.email, "Journal");
    try {
      const newEntryFromServer = await fetchApi("/journal", "POST", {
        content: currentContent,
      });
      setEntries((prevEntries) => [newEntryFromServer, ...prevEntries]);
      setCurrentContent("");
      setSelectedEntry(newEntryFromServer);
    } catch (error) {
      console.error("Failed to save entry:", error);
    }
  };

  const handleGetSummary = async (entry: JournalEntry) => {
    if (!entry || isSummarizing || isGuest) return;
    setIsSummarizing(true);
    try {
      const summary = await summarizeJournalEntry(entry.content);
      const updatedEntry = await fetchApi(
        `/journal/${entry._id}/summary`,
        "POST",
        { summary }
      );
      setEntries((prev) =>
        prev.map((e) => (e._id === entry._id ? updatedEntry : e))
      );
      setSelectedEntry(updatedEntry);
    } catch (error) {
      console.error("Failed to get summary:", error);
    } finally {
      setIsSummarizing(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  return (
    <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8 animate-fade-in-up">
      <div className="md:col-span-1">
        <h1 className="text-3xl font-bold mb-4">My Journal</h1>
        <div className="bg-light-card dark:bg-dark-card rounded-lg p-4 max-h-[calc(100vh-200px)] overflow-y-auto">
          <button
            onClick={() => setSelectedEntry(null)}
            className="w-full text-left p-3 mb-2 rounded-lg bg-primary text-white font-semibold flex items-center"
          >
            <Icon name={IconName.Journal} className="w-5 h-5 mr-2" />
            New Entry
          </button>
          {isLoading ? (
            <p>Loading entries...</p>
          ) : (
            entries.map((entry) => (
              // FIX: Corrected the className syntax error here
              <button
                key={entry._id}
                onClick={() => setSelectedEntry(entry)}
                className={`w-full text-left p-3 rounded-lg transition-colors ${
                  selectedEntry?._id === entry._id
                    ? "bg-primary/20"
                    : "hover:bg-gray-200 dark:hover:bg-gray-700"
                }`}
              >
                <p className="font-semibold">{formatDate(entry.date)}</p>
                <p className="text-sm text-light-subtle dark:text-dark-subtle truncate">
                  {entry.content}
                </p>
              </button>
            ))
          )}
        </div>
      </div>
      <div className="md:col-span-2">
        <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-6 h-full flex flex-col">
          {selectedEntry ? (
            <div className="flex-1 overflow-y-auto">
              <h2 className="text-2xl font-bold mb-2">
                {formatDate(selectedEntry.date)}
              </h2>
              <p className="whitespace-pre-wrap text-lg">
                {selectedEntry.content}
              </p>
              <div className="mt-6">
                <button
                  onClick={() => handleGetSummary(selectedEntry)}
                  disabled={isSummarizing || isGuest}
                  className="inline-flex items-center px-4 py-2 bg-secondary text-white font-semibold rounded-lg"
                >
                  {isSummarizing ? "Thinking..." : "Get AI Insight"}
                </button>
                {selectedEntry.summary && (
                  <div className="mt-4 p-4 bg-primary/10 rounded-lg">
                    <h3 className="font-bold text-primary mb-2">
                      AI Reflection
                    </h3>
                    <p>{selectedEntry.summary}</p>
                  </div>
                )}
              </div>
            </div>
          ) : (
            <div className="flex-1 flex flex-col">
              <h2 className="text-2xl font-bold mb-2">New Journal Entry</h2>
              <textarea
                value={currentContent}
                onChange={(e) => setCurrentContent(e.target.value)}
                disabled={isGuest}
                className="w-full flex-1 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg"
              />
              {!isGuest && (
                <button
                  onClick={handleSaveEntry}
                  className="mt-4 px-6 py-3 bg-primary text-white font-semibold rounded-lg self-end"
                >
                  Save Entry
                </button>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default JournalPage; import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import Icon, { IconName } from "../components/ui/Icon";
import ThemeToggle from "../components/ui/ThemeToggle";

const API_URL = "http://localhost:5000/api";

const LoginPage: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    if (!email || !password) {
      setError("Please fill in all fields.");
      return;
    }

    try {
      const response = await fetch(`${API_URL}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to login");
      }

      // Backend returns user data and token
      // We check if the user is an admin to redirect appropriately
      localStorage.setItem("user", JSON.stringify(data));

      if (data.isAdmin) {
        navigate("/admin/dashboard");
      } else {
        navigate("/app");
      }
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
    <div className="min-h-screen bg-light-bg dark:bg-dark-bg flex items-center justify-center p-4 animate-fade-in">
      <div className="absolute top-4 right-4">
        <ThemeToggle />
      </div>
      <div className="max-w-md w-full bg-light-card dark:bg-dark-card rounded-2xl shadow-xl p-8">
        <div className="text-center mb-8">
          <Link to="/" className="inline-block">
            <div className="mx-auto w-16 h-16 mb-4 bg-primary/20 text-primary rounded-full flex items-center justify-center">
              <Icon name={IconName.Logo} className="w-9 h-9" />
            </div>
          </Link>
          <h2 className="text-3xl font-bold text-light-text dark:text-dark-text">
            Welcome Back
          </h2>
          <p className="text-light-subtle dark:text-dark-subtle mt-2">
            Sign in to continue your journey.
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1"
            >
              Email Address
            </label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="you@example.com"
              className="w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
              required
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1"
            >
              Password
            </label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="••••••••"
              className="w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
              required
            />
          </div>

          {error && <p className="text-red-500 text-sm text-center">{error}</p>}

          <div>
            <button
              type="submit"
              className="w-full bg-primary text-white font-semibold py-3 px-4 rounded-lg shadow-md hover:bg-primary-focus focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-focus transition-transform transform hover:scale-105"
            >
              Sign In
            </button>
          </div>
        </form>

        <p className="text-center text-sm text-light-subtle dark:text-dark-subtle mt-8">
          Don't have an account?{" "}
          <Link
            to="/signup"
            className="font-medium text-primary hover:underline"
          >
            Sign up
          </Link>
        </p>
      </div>
    </div>
  );
};

export default LoginPage; 
import React from 'react';

interface ResourceCardProps {
    title: string;
    description: string;
    link: string;
}

const ResourceCard: React.FC<ResourceCardProps> = ({ title, description, link }) => (
    <div className="bg-light-card dark:bg-dark-card rounded-lg shadow-lg p-6 flex flex-col">
        <h3 className="text-xl font-bold text-primary mb-2">{title}</h3>
        <p className="flex-grow text-light-subtle dark:text-dark-subtle mb-4">{description}</p>
        <a 
            href={link} 
            target="_blank" 
            rel="noopener noreferrer"
            className="self-start font-semibold text-secondary hover:underline"
        >
            Learn More &rarr;
        </a>
    </div>
);

const ResourcesPage: React.FC = () => {
    const resources = [
        {
            title: "Guided Meditation",
            description: "Find calm and focus with guided audio meditations for stress, anxiety, and sleep.",
            link: "https://www.mindful.org/meditation/guided-meditation/"
        },
        {
            title: "Breathing Exercises",
            description: "Learn simple breathing techniques like box breathing to quickly reduce stress and anxiety.",
            link: "https://www.healthline.com/health/breathing-exercises-for-anxiety"
        },
        {
            title: "Understanding CBT",
            description: "Cognitive Behavioral Therapy (CBT) is a powerful tool for changing negative thought patterns. Learn the basics.",
            link: "https://www.apa.org/ptsd-guideline/patients-and-families/cognitive-behavioral"
        },
        {
            title: "Crisis Support",
            description: "If you are in immediate distress, please reach out. You are not alone. The 988 Lifeline is available 24/7.",
            link: "https://988lifeline.org/"
        },
        {
            title: "NAMI",
            description: "The National Alliance on Mental Illness provides advocacy, education, support and public awareness.",
            link: "https://www.nami.org/"
        },
        {
            title: "Mental Health America",
            description: "MHA is the nation’s leading community-based nonprofit dedicated to addressing the needs of those living with mental illness.",
            link: "https://www.mhanational.org/"
        }
    ];

    return (
        <div className="animate-fade-in-up">
            <div className="text-center mb-12">
                <h1 className="text-4xl font-bold mb-2">Helpful Resources</h1>
                <p className="text-lg text-light-subtle dark:text-dark-subtle max-w-2xl mx-auto">
                    Here are some tools and information to support you on your mental wellness journey.
                </p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {resources.map((res, index) => (
                    <ResourceCard key={index} title={res.title} description={res.description} link={res.link} />
                ))}
            </div>
             <div className="mt-12 p-6 bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 rounded-lg">
                <h3 className="font-bold text-red-800 dark:text-red-200">Important Disclaimer</h3>
                <p className="text-red-700 dark:text-red-300 mt-1">
                    SereneMind AI is a supportive tool, not a replacement for professional medical advice, diagnosis, or treatment. If you are in crisis or believe you may have a medical emergency, call your doctor or 911 immediately.
                </p>
            </div>
        </div>
    );
};

export default ResourcesPage; import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import Icon, { IconName } from "../components/ui/Icon";
import ThemeToggle from "../components/ui/ThemeToggle";

const API_URL = "http://localhost:5000/api";

const SignUpPage: React.FC = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    if (!name || !email || !password) {
      setError("Please fill in all fields.");
      return;
    }

    try {
      const response = await fetch(`${API_URL}/auth/signup`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name, email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to sign up");
      }

      // On successful signup, backend returns user data and token
      localStorage.setItem("user", JSON.stringify(data));
      navigate("/app");
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
    <div className="min-h-screen bg-light-bg dark:bg-dark-bg flex items-center justify-center p-4 animate-fade-in">
      <div className="absolute top-4 right-4">
        <ThemeToggle />
      </div>
      <div className="max-w-md w-full bg-light-card dark:bg-dark-card rounded-2xl shadow-xl p-8">
        <div className="text-center mb-8">
          <Link to="/" className="inline-block">
            <div className="mx-auto w-16 h-16 mb-4 bg-primary/20 text-primary rounded-full flex items-center justify-center">
              <Icon name={IconName.Logo} className="w-9 h-9" />
            </div>
          </Link>
          <h2 className="text-3xl font-bold text-light-text dark:text-dark-text">
            Create Your Sanctuary
          </h2>
          <p className="text-light-subtle dark:text-dark-subtle mt-2">
            Start your journey towards a calmer mind.
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label
              htmlFor="name"
              className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1"
            >
              Name
            </label>
            <input
              id="name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Your Name"
              className="w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
              required
            />
          </div>
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1"
            >
              Email Address
            </label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="you@example.com"
              className="w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
              required
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1"
            >
              Password
            </label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="••••••••"
              className="w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition"
              required
            />
          </div>

          {error && <p className="text-red-500 text-sm text-center">{error}</p>}

          <div>
            <button
              type="submit"
              className="w-full bg-primary text-white font-semibold py-3 px-4 rounded-lg shadow-md hover:bg-primary-focus focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-focus transition-transform transform hover:scale-105"
            >
              Create Account
            </button>
          </div>
        </form>

        <p className="text-center text-sm text-light-subtle dark:text-dark-subtle mt-8">
          Already have an account?{" "}
          <Link
            to="/login"
            className="font-medium text-primary hover:underline"
          >
            Sign In
          </Link>
        </p>
      </div>
    </div>
  );
};

export default SignUpPage; const API_URL = "http://localhost:5000/api"; // Your backend URL

/**
 * A helper function for making authenticated API requests.
 * @param {string} endpoint The API endpoint to call (e.g., '/journal').
 * @param {string} method The HTTP method (e.g., 'GET', 'POST').
 * @param {object} [body] The request body for POST/PUT requests.
 * @returns {Promise<any>} The JSON response from the server.
 */
export const fetchApi = async (endpoint, method = "GET", body) => {
  const userString = localStorage.getItem("user");
  if (!userString) {
    // Handle cases where the user is logged out but an API call is attempted
    console.error("No user found in localStorage.");
    // Optional: redirect to login
    // window.location.href = '/login';
    return;
  }

  const user = JSON.parse(userString);
  const token = user?.token;

  const headers = {
    "Content-Type": "application/json",
  };

  if (token) {
    headers["Authorization"] = `Bearer ${token}`;
  }

  const config = {
    method,
    headers,
  };

  if (body) {
    config.body = JSON.stringify(body);
  }

  try {
    const response = await fetch(`${API_URL}${endpoint}`, config);

    if (!response.ok) {
      if (response.status === 401) {
        // Token is invalid or expired, log the user out
        localStorage.removeItem("user");
        window.location.href = "#/login";
      }
      const errorData = await response.json();
      throw new Error(
        errorData.message || `HTTP error! status: ${response.status}`
      );
    }

    // Handle responses with no content
    if (response.status === 204) {
      return null;
    }

    return await response.json();
  } catch (error) {
    console.error("API call failed:", error);
    throw error;
  }
}; import { GoogleGenerativeAI, Content } from "@google/generative-ai";

const API_KEY = process.env.GEMINI_API_KEY;

if (!API_KEY) {
  throw new Error(
    "API_KEY environment variable not set. Check your .env file and RESTART the server."
  );
}
const API_URL = "http://localhost:5000/api";

const genAI = new GoogleGenerativeAI(API_KEY);
const modelName = "gemini-1.5-flash";

const FLAGGED_KEYWORDS = [
  "suicide",
  "kill myself",
  "end it all",
  "no reason to live",
  "hopeless",
  "i want to die",
];

export const checkForFlags = async (
  text: string,
  userEmail: string,
  type: "Journal" | "Chat"
): Promise<void> => {
  if (!text || !userEmail) return;
  const contentLower = text.toLowerCase();
  if (FLAGGED_KEYWORDS.some((keyword) => contentLower.includes(keyword))) {
    try {
      await fetch(`${API_URL}/admin/flags`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text, userEmail, type }),
      });
    } catch (error) {
      console.error("Failed to send flag to backend:", error);
    }
  }
};

const getAIResponse = async (
  prompt: string,
  systemInstruction: string
): Promise<string> => {
  try {
    const model = genAI.getGenerativeModel({
      model: modelName,
      systemInstruction: {
        role: "system",
        parts: [{ text: systemInstruction }],
      },
    });
    const result = await model.generateContent(prompt);
    return (
      result.response.text() ?? "I'm sorry, I couldn't generate a response."
    );
  } catch (error) {
    console.error("Error fetching AI response:", error);
    return "I'm having trouble connecting right now. Please try again.";
  }
};

export const summarizeJournalEntry = async (
  entryContent: string
): Promise<string> => {
  const prompt = `Please provide a gentle, insightful summary for this journal entry: "${entryContent}"`;
  return getAIResponse(prompt, "You are an insightful journal analyst.");
};

export const getMotivationalQuote = async (
  adminQuotes: { text: string }[]
): Promise<string> => {
  if (Array.isArray(adminQuotes) && adminQuotes.length > 0) {
    const randomIndex = Math.floor(Math.random() * adminQuotes.length);
    return adminQuotes[randomIndex].text;
  }
  const prompt = "Give me one powerful motivational quote.";
  return getAIResponse(prompt, "You are a curator of inspiring quotes.");
};

export const startChatAndStreamResponse = async (
  history: Content[],
  newMessage: string,
  onStream: (chunk: string) => void
): Promise<void> => {
  try {
    const model = genAI.getGenerativeModel({
      model: modelName,
      systemInstruction: {
        role: "system",
        parts: [{ text: "You are Serene, a compassionate AI companion..." }],
      },
    });
    const chat = model.startChat({ history });
    const result = await chat.sendMessageStream(newMessage);
    for await (const chunk of result.stream) {
      onStream(chunk.text());
    }
  } catch (error) {
    console.error("Error in chat response stream:", error);
    onStream("I'm having trouble thinking. Please try again.");
  }
}; import React from "react";
import { HashRouter, Routes, Route, Navigate } from "react-router-dom";
import { ThemeProvider } from "./contexts/ThemeContext";

// Import your new wrapper components
import {
  ProtectedAppRoutes,
  ProtectedAdminRoutes,
} from "./components/auth/ProtectedRoutes";

// Import all your pages
import HomePage from "./pages/HomePage";
import LoginPage from "./pages/LoginPage";
import SignUpPage from "./pages/SignUpPage";
import ErrorPage from "./pages/ErrorPage";
import ChatPage from "./pages/ChatPage";
import JournalPage from "./pages/JournalPage";
import AnalyticsPage from "./pages/AnalyticsPage";
import ResourcesPage from "./pages/ResourcesPage";
import AdminDashboardPage from "./pages/admin/AdminDashboardPage";
import UserManagementPage from "./pages/admin/UserManagementPage";
import ContentManagementPage from "./pages/admin/ContentManagementPage";
import UserDetailsPage from "./pages/admin/UserDetailsPage";
import FlaggedContentPage from "./pages/admin/FlaggedContentPage";

const App: React.FC = () => {
  return (
    <ThemeProvider>
      <HashRouter>
        <Routes>
          {/* --- Group 1: Public Routes --- */}
          {/* These are completely unprotected. */}
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/signup" element={<SignUpPage />} />

          {/* --- Group 2: Protected User Routes --- */}
          {/* The wrapper handles auth and layout. The children are the actual pages. */}
          <Route element={<ProtectedAppRoutes />}>
            <Route path="/app" element={<Navigate to="/app/chat" replace />} />
            <Route path="/app/chat" element={<ChatPage />} />
            <Route path="/app/journal" element={<JournalPage />} />
            <Route path="/app/analytics" element={<AnalyticsPage />} />
            <Route path="/app/resources" element={<ResourcesPage />} />
          </Route>

          {/* --- Group 3: Protected Admin Routes --- */}
          {/* This wrapper handles admin auth and layout. */}
          <Route element={<ProtectedAdminRoutes />}>
            <Route
              path="/admin"
              element={<Navigate to="/admin/dashboard" replace />}
            />
            <Route path="/admin/dashboard" element={<AdminDashboardPage />} />
            <Route path="/admin/users" element={<UserManagementPage />} />
            <Route
              path="/admin/users/:userEmail"
              element={<UserDetailsPage />}
            />
            <Route path="/admin/content" element={<ContentManagementPage />} />
            <Route path="/admin/flags" element={<FlaggedContentPage />} />
          </Route>

          {/* --- Group 4: The Catch-All Error Route --- */}
          {/* This is at the end and is not protected by any guard. */}
          <Route path="*" element={<ErrorPage />} />
        </Routes>
      </HashRouter>
    </ThemeProvider>
  );
};

export default App; <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SereneMind AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: "#3B82F6", // Blue 500
              "primary-focus": "#2563EB", // Blue 600
              secondary: "#10B981", // Emerald 500
              accent: "#EC4899", // Pink 500
              "light-bg": "#F9FAFB", // Gray 50
              "dark-bg": "#111827", // Gray 900
              "light-card": "#FFFFFF",
              "dark-card": "#1F2937", // Gray 800
              "light-text": "#1F2937", // Gray 800
              "dark-text": "#F9FAFB", // Gray 50
              "light-subtle": "#6B7280", // Gray 500
              "dark-subtle": "#9CA3AF", // Gray 400
            },
            fontFamily: {
              sans: ["Inter", "sans-serif"],
            },
            animation: {
              "fade-in": "fadeIn 0.5s ease-in-out",
              "fade-in-up": "fadeInUp 0.6s ease-in-out",
              "pulse-subtle":
                "pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
            },
            keyframes: {
              fadeIn: {
                "0%": { opacity: "0" },
                "100%": { opacity: "1" },
              },
              fadeInUp: {
                "0%": { opacity: "0", transform: "translateY(20px)" },
                "100%": { opacity: "1", transform: "translateY(0)" },
              },
              "pulse-subtle": {
                "0%, 100%": { opacity: 1 },
                "50%": { opacity: 0.7 },
              },
            },
          },
        },
      };
    </script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <script type="importmap">
      {
        "imports": {
          "react/": "https://esm.sh/react@^19.1.0/",
          "react": "https://esm.sh/react@^19.1.0",
          "react-dom/": "https://esm.sh/react-dom@^19.1.0/",
          "@google/genai": "https://esm.sh/@google/genai@^1.11.0",
          "recharts": "https://esm.sh/recharts@^3.1.0",
          "react-router-dom": "https://esm.sh/react-router-dom@^7.7.1"
        }
      }
    </script>
    <link rel="stylesheet" href="/index.css" />
  </head>
  <body class="bg-light-bg dark:bg-dark-bg">
    <div id="root"></div>
    <script type="module" src="/index.tsx"></script>
  </body>
</html> 
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
); {
  "name": "serenemind-ai",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@google/genai": "^1.11.0",
    "@google/generative-ai": "^0.24.1",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.7.1",
    "recharts": "^3.1.0",
    "tailwind": "^4.0.0"
  },
  "devDependencies": {
    "@types/node": "^22.14.0",
    "@types/react": "^19.1.8",
    "typescript": "~5.7.2",
    "vite": "^6.2.0"
  }
} 
export interface ChatMessage {
  id: string;
  role: 'user' | 'model';
  text: string;
  timestamp: string;
}

export interface JournalEntry {
  id:string;
  date: string;
  content: string;
  summary?: string;
}

export enum Mood {
    Awful = 1,
    Bad = 2,
    Okay = 3,
    Good = 4,
    Great = 5,
}

export interface MoodLog {
  date: string; // ISO string for the date part only
  mood: Mood;
}

export interface FlaggedContent {
  id: string;
  userEmail: string;
  content: string;
  type: 'Journal' | 'Chat';
  date: string;
}
